%initialisation clear;X = load('linearX.csv');y = load('linearY.csv');m = length(X);% add the intercept term to the training inputsX = [ones(m,1),X];alpha = 0.01 %stepsize [theta,J_history] = theta_gradient(X,y,alpha,m);%plot the training datascatter(X(:,2),y)xlabel('X'); ylabel('y');%plot the linear fit hold on; % hold the previous plotplot(X(:,2),X*theta,'g')xlabel('values');ylabel('class label');hold off; %no further plot on this graphlegend('data points','linear hypothesis')theta %Visulaising Jtheta0_vals = linspace(-10,10,100);theta1_vals = linspace(-1,4,100);J_vals = zeros(length(theta0_vals),length(theta1_vals)); %initialise values for surface plot%fill the values of cost functionfor i = 1: length(theta0_vals)  for j = 1: length(theta1_vals)    t = [theta0_vals(i);theta1_vals(j)]; %theta vector of this specific choice     J_vals(i,j) = compute_cost(X,y,t,m);  endend  J_vals = J_vals'; % this is due to the fact that mesh grids works with inverted axes%surface plotfigure;surf(theta0_vals,theta1_vals,J_vals)xlabel('\theta0'); ylabel('\theta1');%contour plotfigure;contour(theta0_vals,theta1_vals,J_vals,logspace(-2,5,20)) %plots 20 contour circles xlabel('\theta0'); ylabel('\theta1'); 